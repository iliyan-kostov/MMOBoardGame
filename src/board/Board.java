package board;

import java.awt.Dimension;

/**
 * <p>
 * Абстрактен клас за дъската в играта.
 * <p>
 * Дъската може да бъде абстрактно представена като ортогонална мрежа от полета,
 * върху всяко от които в даден момент може да бъде разположена най-много една
 * фигура. Полетата са разположени по две оси - в редове (по X) и колони (по Y).
 * Размерите на дъската са от типа {@link Dimension}, определящ броя редове
 * (height) и броя колони (width). Горното ляво поле е с координати (x=1, y=1),
 * като координатите нарастват в посока отляво надясно и отгоре надолу.
 * <p>
 * Възможно и препоръчително е при описание на логиката на играта чрез
 * класове-наследници да бъде реализирана концепцията за свързани и ограничени
 * свойства.
 *
 * @author iliyan-kostov <https://github.com/iliyan-kostov/>
 */
public abstract class Board {

    /**
     * размерите на дъската
     */
    private final Dimension dimension;

    /**
     * масив с фигурите върху полетата от дъската. Масивът е индексиран по
     * колони и редове: Figure[x][y] е фигурата с координати (x,y).
     */
    private final Figure[][] figures;

    /**
     * Конструктор. Създава празна дъска със зададените размери.
     *
     * @param dimension размерите на дъската
     */
    public Board(Dimension dimension) {
        this.dimension = new Dimension(dimension.width, dimension.height);
        this.figures = new Figure[this.dimension.width + 1][this.dimension.width + 1];
        for (int i = this.dimension.width; i > - 1; i--) {
            for (int j = this.dimension.height; j > -1; j--) {
                this.figures[i][j] = null;
            }
        }
    }

    /**
     * Връща размерите на дъската.
     *
     * @return размерите на дъската
     */
    public final Dimension getDimension() {
        return new Dimension(this.dimension.width, this.dimension.height);
    }

    /**
     * Връща като резултат фигурата, разположена върху полето със зададените X и
     * Y координати, ако има такава; в противен случай връща null.
     *
     * @param x X-координатата на полето
     *
     * @param y Y-координатата на полето
     *
     * @return фигурата, разположена върху полето със зададените X и Y
     * координати, ако има такава; в противен случай връща null
     */
    public final Figure getFigure(int x, int y) {
        return this.figures[x][y];
    }

    /**
     * Поставя зададената фигура върху полето със зададените X и Y координати,
     * като заменя предишно поставената върху полето фигура, ако има такава.
     * Връща като резултат предишно поставената върху полето фигура, ако има
     * такава; в противен случай връща null.
     *
     * @param x X-координатата на полето
     *
     * @param y Y-координатата на полето
     *
     * @param figure фигурата, която да бъде поставена
     *
     * @return предишно поставената върху полето фигура, ако има такава; в
     * противен случай връща null
     */
    public final Figure setFigure(int x, int y, Figure figure) {
        Figure previous = this.getFigure(x, y);
        this.figures[x][y] = figure;
        return previous;
    }

    /**
     * Премества фигура от едно поле в друго по зададени координати на началното
     * и крайното поле. Връща като резултат предишно поставената върху крайното
     * поле фигура, ако има такава; в противен случай връща null. Конкретната
     * имплементация на метода се предоставя за класовете-наследници, в
     * съответствие с конкретните правила и логика на играта.
     *
     * @param x1 X-координатата на началното поле
     *
     * @param y1 Y-координатата на началното поле
     *
     * @param x2 X-координатата на крайното поле
     *
     * @param y2 Y-координатата на крайното поле
     *
     * @return предишно поставената върху крайното поле фигура, ако има такава;
     * в противен случай връща null
     */
    public abstract Figure moveFigure(int x1, int y1, int x2, int y2);
}
